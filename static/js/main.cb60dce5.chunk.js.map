{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAOAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEjB,IAAMC,EAAKT,IAASS,OACdC,EAAUV,IAASU,YAgBzB,SAASC,IAKP,OACE,wBAAQC,QALa,WACrB,IAAMC,EAAS,IAAIb,IAASS,KAAKK,mBACjCL,EAAKM,gBAAgBF,IAGrB,iCAIJ,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAS,kBAAIH,EAAKS,WAA1B,sBAMJ,SAASC,IACP,IAAMC,EAAMC,mBACNC,EAAYZ,EAAUa,WAAW,YACjCC,EAAMF,EAAYG,QAAQ,aAAaC,MAAM,IACnD,EAAiBC,YAAkBH,EAAM,CAACI,QAAQ,OAA3CC,EAAP,oBACA,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAW,uCAAC,WAAMC,GAAN,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,EAEK3B,EAAKQ,YAAnBoB,EAFS,EAETA,IAAIC,EAFK,EAELA,SAFK,SAGVhB,EAAYiB,IAAI,CACpBC,KAAKT,EACLU,UAAUzC,IAASU,UAAUgC,WAAWC,kBACxCN,MACAC,aAPc,OAShBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAACC,SAAS,WAVvB,2CAAD,sDAYjB,OACE,gCACE,iCACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAE,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACrD,qBAAKC,IAAKhC,OAEZ,uBAAMiC,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAKF,EAAaE,EAAEsB,OAAOF,UAC9D,wBAAQG,KAAK,SAAb,oCAKR,SAASR,EAAYS,GAEnB,MAA0BA,EAAMR,QAAzBV,EAAP,EAAOA,KAAKH,EAAZ,EAAYA,IAAIC,EAAhB,EAAgBA,SACVqB,EAAatB,IAAM5B,EAAKQ,YAAYoB,IAAI,OAAO,WACrD,OACE,sBAAKuB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKvB,IACV,4BAAIE,OAIKsB,MA3Ef,WACE,MAAaC,YAAatD,GAAnBuD,EAAP,oBAEA,OACE,gCACC,iCACD,cAAChD,EAAD,MAEC,kCACGgD,EAAK,cAAC7C,EAAD,IAAY,cAACR,EAAD,UCfVsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb60dce5.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAjy6-8GoX8wIh2lARIda7tRfc26HSM870\",\n  authDomain: \"superchat-cbc41.firebaseapp.com\",\n  projectId: \"superchat-cbc41\",\n  storageBucket: \"superchat-cbc41.appspot.com\",\n  messagingSenderId: \"806540170195\",\n  appId: \"1:806540170195:web:ee847903011d57353cd526\",\n  measurementId: \"G-Z3TH9W9LNP\"\n})\nconst auth=firebase.auth();\nconst firestore=firebase.firestore();\nfunction App() {\n  const [user]=useAuthState(auth);\n\n  return (\n    <div >\n     <header>\n    <SignOut/>\n     </header>\n     <section>\n       {user?<ChatRoom/>:<SignIn/>}\n     </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const SignInWithGoogle=()=>{\n    const provider=new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <button onClick={SignInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={()=>auth.signOut()}>\n      Sign Out\n    </button>\n  );\n}\n\nfunction ChatRoom() {\n  const dummy=useRef()\n  const messagesRef=firestore.collection('messages');\n  const query=messagesRef.orderBy('createdAt').limit(25);\n  const [messages]=useCollectionData(query,{idField:'id'});\n  const [formValue,setFormValue]=useState('');\n  const sendMessage=async(e)=>{\n    e.preventDefault();\n    const {uid,photoURL}=auth.currentUser;\n    await messagesRef.add({\n      text:formValue,\n      createdAt:firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue('');\n    dummy.current.scrollIntoView({behavior:'smooth'});\n  }\n  return (\n    <div>\n      <main>\n        {messages && messages.map(msg=><ChatMessage key={msg.id} message={msg}/>)}\n        <div ref={dummy}></div>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e)=>setFormValue(e.target.value)}/>\n        <button type=\"submit\">ðŸš€Send</button>\n      </form>\n    </div>\n  );\n}\nfunction ChatMessage(props)\n{\n  const {text,uid,photoURL}=props.message;\n  const messageClass=uid===auth.currentUser.uid?'sent':'recieved';\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL}/>\n      <p>{text}</p>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}